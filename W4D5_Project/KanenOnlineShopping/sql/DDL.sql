--USERS TABLE (UNABLE TO CREATE USER TABLE - USER IS  RESERVED)
CREATE TABLE USERS(
	 USER_ID        NUMBER(15)   NOT NULL PRIMARY KEY
	,USERNAME       VARCHAR(40)  UNIQUE NOT NULL 
	,USER_PASSWORD  VARCHAR(100) NOT NULL
	,FULL_NAME      VARCHAR(60)  NOT NULL
	,EMAIL          VARCHAR(50)  NOT NULL
	,ADDRESS        VARCHAR(225) NOT NULL
	,MOBILE_NUMBER  VARCHAR(15) 
	,USER_ROLE      VARCHAR(8)   NOT NULL
	,IS_BLACKLISTED VARCHAR(3)
);

--DROP TABLE USERS;
/*
 SEQUENCE AND TRIGGER FOR USERS TABLE
*/

CREATE SEQUENCE USER_ID_SEQ START WITH 1000000001 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER USER_ID_TRIG
BEFORE INSERT ON USERS
FOR EACH ROW
BEGIN
IF :new.USER_ID IS NULL THEN
SELECT USER_ID_SEQ.nextval INTO :new.USER_ID FROM DUAL;
END IF;
END;

--DROP SEQUENCE USER_UUID_SEQ;
--DROP TRIGGER USER_ID_TRIG;
/*
INSERT INTO USERS(    
 USERNAME      
,USER_PASSWORD 
,FULL_NAME     
,EMAIL         
,ADDRESS       
,MOBILE_NUMBER 
,USER_ROLE     
,USER_BALANCE  )
VALUES('brionse','redhat','Sebastian Briones', 'sebastian.briones@oocl.com', 'Gladiola, Laguna', '09876543211', 'customer', 100000.00);
*/
--PRODUCTS TABLE
CREATE TABLE PRODUCT(
    PRODUCT_ID             NUMBER(15)   NOT NULL PRIMARY KEY
   ,PRODUCT_NAME           VARCHAR(80)  UNIQUE NOT NULL
   ,PRODUCT_DESCRIPTION    VARCHAR(220) NOT NULL
   ,PRODUCT_PRICE          NUMBER(10,2) NOT NULL
   ,PRODUCT_STOCK_QUANTITY NUMBER(8)    NOT NULL
   ,PRODUCT_IMAGE_PATH     VARCHAR(220) NOT NULL
);

--DROP TABLE PRODUCT;
/*
 SEQUENCE AND TRIGGER FOR PRODUCT TABLE
*/

CREATE SEQUENCE PRODUCT_ID_SEQ START WITH 2000000001 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER PRODUCT_ID_TRIG
BEFORE INSERT ON PRODUCT
FOR EACH ROW
BEGIN
IF :new.PRODUCT_ID IS NULL THEN
SELECT PRODUCT_ID_SEQ.nextval INTO :new.PRODUCT_ID FROM DUAL;
END IF;
END;

--DROP SEQUENCE PRODUCT_ID_SEQ;
--DROP TRIGGER PRODUCT_ID_TRIG;

--ORDERS TABLE
CREATE TABLE ORDERS(
   ORDER_ID      NUMBER(15)   NOT NULL PRIMARY KEY
  ,USER_ID       NUMBER(15)   NOT NULL
  ,ORDER_DATE    VARCHAR(18)  NOT NULL
  ,TOTAL_COST    NUMBER(10,2) NOT NULL
  ,ORDER_STATUS  VARCHAR(20)  NOT NULL
);

ALTER TABLE ORDERS ADD CONSTRAINT FK_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID);
/*
 SEQUENCE AND TRIGGER FOR ORDER TABLE
*/

CREATE SEQUENCE ORDER_ID_SEQ START WITH 3000000001 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ORDER_ID_TRIG
BEFORE INSERT ON ORDERS
FOR EACH ROW
BEGIN
IF :new.ORDER_ID IS NULL THEN
SELECT ORDER_ID_SEQ.nextval INTO :new.ORDER_ID FROM DUAL;
END IF;
END;

--DROP SEQUENCE ORDER_ID_SEQ;
--DROP TRIGGER ORDER_ID_TRIG;

--ORDER ITEM TABLE
CREATE TABLE ORDER_ITEM(
    ORDER_ITEM_ID  NUMBER(15)   NOT NULL PRIMARY KEY
   ,ORDER_ID       NUMBER(15)   NOT NULL
   ,PRODUCT_ID     NUMBER(15)   NOT NULL
   ,QUANTITY       NUMBER(4)    NOT NULL
   ,ORDERED_PRICE  NUMBER(10,2) NOT NULL
);

ALTER TABLE ORDER_ITEM ADD CONSTRAINT FK_ORDER_ID FOREIGN KEY (ORDER_ID) REFERENCES ORDERS (ORDER_ID);
ALTER TABLE ORDER_ITEM ADD CONSTRAINT FK_PRODUCT_ID FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID);

/*
 SEQUENCE AND TRIGGER FOR ORDER_ITEM TABLE
*/

CREATE SEQUENCE ORDER_ITEM_ID_SEQ START WITH 3000000001 INCREMENT BY 1;

CREATE OR REPLACE TRIGGER ORDER_ITEM_ID_TRIG
BEFORE INSERT ON ORDER_ITEM
FOR EACH ROW
BEGIN
IF :new.ORDER_ITEM_ID IS NULL THEN
SELECT ORDER_ITEM_ID_SEQ.nextval INTO :new.ORDER_ITEM_ID FROM DUAL;
END IF;
END;


--DROP SEQUENCE ORDER_ID_SEQ;
--DROP TRIGGER ORDER_ID_TRIG;

ALTER TABLE USERS DROP COLUMN USER_BALANCE;
ALTER TABLE USERS ADD (IS_BLACKLISTED VARCHAR(3));