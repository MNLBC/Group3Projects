/*
 * File: app/controller/AdminController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.AdminController', {
    extend: 'Ext.app.Controller',

    refs: [
        {
            ref: 'centerContainer',
            selector: '#CenterContainer'
        },
        {
            ref: 'orderRequestsPanel',
            selector: '#orderRequestsPanel'
        },
        {
            ref: 'customerConfirmPanel',
            selector: '#customerConfirmPanel'
        },
        {
            ref: 'username',
            selector: '#txtUsername'
        },
        {
            ref: 'password',
            selector: '#txtPassword'
        },
        {
            ref: 'loginContainer',
            selector: '#loginContainer'
        },
        {
            ref: 'adminPageContainer',
            selector: '#adminContainer'
        },
        {
            ref: 'viewAllOrderPanel',
            selector: '#viewAllOrderPanel'
        }
    ],

    onBtnCustomerRequestClick: function() {
        this.getCustomerConfirmPanel().show();
        this.getOrderRequestsPanel().hide();
        this.getViewAllOrderPanel().hide();

        var customerRequestGrid = Ext.getCmp('membershipRequestGrid');
        var customerRequestStore = customerRequestGrid.getStore();

        customerRequestStore.clearData();
        customerRequestGrid.getView().refresh();

        Ext.Ajax.request({
            url: window.location.pathname +'admin/userRequest',
            method: 'POST',

            scope: this,
            success: function(response){
                var responseText = Ext.decode(response.responseText);
                for (var ctr = 0; ctr < responseText.userRequest.length; ctr++){
                    var userRequest = {
                        userId:responseText.userRequest[ctr].userId,
                        fullName: responseText.userRequest[ctr].fullname,
                        currentMembershipLevel: responseText.userRequest[ctr].currentType,
                        requestedMembershipLevel: responseText.userRequest[ctr].requestType,
                        isForApproval: responseText.userRequest[ctr].forApproval,
                        isRequestApproved: responseText.userRequest[ctr].isApproved
                    };
                    customerRequestStore.add(userRequest);
               }
          },
            failure: function(){
                Ext.MessageBox.alert('Loading Failed','Unable to connect to server');
            }

        });
    },

    onConfirmOrderBtnClick: function() {
        this.getOrderRequestsPanel().show();
        this.getViewAllOrderPanel().hide();
        this.getCustomerConfirmPanel().hide();

        var orderGrid = Ext.getCmp('orderRequestsGrid');
        var orderGridStore = orderGrid.getStore();

        orderGridStore.remoteFilter = false;
        orderGridStore.clearFilter();
        orderGridStore.filter('orderStatus','Pending Order');

        orderGridStore.clearData();
        orderGrid.getView().refresh();

        Ext.Ajax.request({
             url: window.location.pathname +'admin/getOrders',
             method: 'POST',

            scope: this,
            success: function(response){
                  var responseText = Ext.decode(response.responseText);

               for (var ctr = 0; ctr < responseText.orderList.length; ctr++){
                    var order = {
                        orderId: responseText.orderList[ctr].order.orderId,
                        userId: responseText.orderList[ctr].userID,
                        userFullName: responseText.orderList[ctr].fullName,
                        orderDate: responseText.orderList[ctr].order.orderDate,
                        totalCost: responseText.orderList[ctr].order.totalCost,
                        orderStatus: responseText.orderList[ctr].order.orderStatus

                    };

                    orderGridStore.add(order);
                }
            },

            failure: function(){
                Ext.MessageBox.alert('Loading Failed','Unable to connect to server');
            }
        });
    },

    onBtnLoginClick: function() {
        var userName = Ext.getCmp('txtUsername').getValue();
        var userPassword = Ext.getCmp('txtPassword').getValue();
        var userStore = Ext.getStore('userStore');
        userStore.removeAll();

        Ext.Ajax.request({

            url: window.location.pathname +'admin/login',
            method: 'POST',

            params: {
                userName: userName,
                userPassword: userPassword
            },
            scope:this,
            success:function(response){
                var responseText = Ext.decode(response.responseText);

                if (responseText.success == true){
                       if (responseText.user.userRole != 'Admin'){
                            Ext.MessageBox.alert('Status', 'Unauthorized User');
                            Ext.getCmp('txtUsername').setValue();
                            Ext.getCmp('txtPassword').setValue();
                        }
                        else{

                            var loggedInUser = {
                                userId: responseText.user.userId,
                                userName: responseText.user.username,
                                userFullName: responseText.user.fullName,
                                userRole: responseText.user.userRole,
                                userPassword: ''
                            };

                            userStore.add(loggedInUser);
                            Ext.MessageBox.alert('Status', 'Logged in successfully');
                            var lblName = Ext.getCmp('lblName').text;
                            lblName = Ext.getStore('userStore').data.items[0].data.userFullName;
                            Ext.getCmp('txtUsername').setValue();
                            Ext.getCmp('txtPassword').setValue();
                            this.getLoginContainer().hide();
                            this.getAdminPageContainer().show();

                        }
                } else {
                    Ext.MessageBox.alert('Login Failed', 'Invalid Credentials');
                    Ext.getCmp('txtUsername').setValue();
                    Ext.getCmp('txtPassword').setValue();
                }

            },
            failure:function(){
                Ext.MessageBox.alert('Login Failed', 'Unable to connect to server, Please try again.');
            }

        });
    },

    onViewAllOrderGridItemDblClick: function() {
        var viewAllOrderGrid = Ext.getCmp('viewAllOrderGrid');
                 var orderItems = Ext.getStore('orderItems');
                 var selModel = viewAllOrderGrid.getSelectionModel();
                 var selectedRecords = selModel.getSelection();
                 var selectionCount = selModel.getCount();
                 var orderId = selectedRecords[0].data.orderId;

                 orderItems.clearFilter(true);
                 orderItems.filter('orderId', orderId);
                Ext.create('Ext.window.Window',{

                                       rendetTo: Ext.getBody(),
                                       bodyPadding: 10,
                                       title: 'Order Summary',
                                       closable: true,
                                       autoShow: true,
                                       resizable: false,
                                       modal: true,
                                       draggable: false,
                                       width:1054,
                                       height:600,
                                       items:[ {

                                                   xtype: 'gridpanel',
                                                   id: 'orderSummaryGridPanel',
                                                   itemId: 'orderSummaryGridPanel',
                                                   title: 'List of Transactions',
                                                   store: 'orderItems',
                                                            columns: [
                                                                {
                                                                    xtype: 'gridcolumn',
                                                                    width: 500,
                                                                    flex:1,
                                                                    dataIndex: 'productId',
                                                                    text: 'Product Id'
                                                                },
                                                                 {
                                                                    xtype: 'gridcolumn',
                                                                    width: 200,
                                                                      flex:1,
                                                                    dataIndex: 'productName',
                                                                    text: 'Product Name'
                                                                },
                                                               {
                                                                    xtype: 'numbercolumn',
                                                                    width: 272,
                                                                    flex:1,
                                                                    dataIndex: 'quantity',
                                                                    text: 'Quantity'
                                                                },
                                                               {
                                                                    xtype: 'numbercolumn',
                                                                    width: 272,
                                                                    flex:1,
                                                                    dataIndex: 'productPrice',
                                                                    text: 'Price'
                                                                }
                                                            ]
                                                }
                                              ]
                        });
                        var orderStore = Ext.getStore('orderItems');
                        var orderId = orderStore.data.items[0].data.orderId;
    },

    onViewAllOrderBtnClick: function() {
        this.getOrderRequestsPanel().hide();
        this.getCustomerConfirmPanel().hide();
        this.getViewAllOrderPanel().show();

        var viewAllGrid = Ext.getCmp('viewAllOrderGrid');
        var viewAllGridStore = viewAllGrid.getStore();
        var orderItemsStore = Ext.getStore('orderItems');

        orderItemsStore.removeAll();
        viewAllGridStore.clearData();
        viewAllGrid.getView().refresh();


        Ext.Ajax.request({
             url: window.location.pathname +'admin/getOrders',
             method: 'POST',

            scope: this,
            success: function(response){
                var responseText = Ext.decode(response.responseText);

                for (var ctr = 0; ctr < responseText.orderList.length; ctr++){
                    var order = {
                        orderId: responseText.orderList[ctr].order.orderId,
                        userId: responseText.orderList[ctr].userID,
                        userFullName: responseText.orderList[ctr].fullName,
                        orderDate: responseText.orderList[ctr].order.orderDate,
                        totalCost: responseText.orderList[ctr].order.totalCost,
                        orderStatus: responseText.orderList[ctr].order.orderStatus

                    };

                    viewAllGridStore.add(order);
                }


                for (var i = 0; i < responseText.itemList.length; i++){
                    var items = {
                        orderId: responseText.itemList[i].orderId,
                        orderItemId: responseText.itemList[i].item.orderItemId,
                        productId: responseText.itemList[i].item.productId,
                        productName: responseText.itemList[i].productname,
                        quantity: responseText.itemList[i].item.quantity,
                        productPrice: responseText.itemList[i].item.productPrice

                    };

                    orderItemsStore.add(items);
                }
            },

            failure: function(){
                Ext.MessageBox.alert('Loading Failed','Unable to connect to server');
            }

        });
    },

    onBtnApproveRequestClick: function() {
        var userRequestGrid = Ext.getCmp('membershipRequestGrid');
        var userGridStore = userRequestGrid.getStore();
        var selectedRows = userRequestGrid.getSelectionModel().getSelection()[0];
        var rowIndex = userGridStore.indexOf(selectedRows);
        if (rowIndex >-1 ){
            var userId = selectedRows.data.userId;
            var requestedMembershipLevel = selectedRows.data.requestedMembershipLevel;
            Ext.Msg.confirm('Approve Request', 'Do you want to Approve this request?',function(btn){
                if (btn==='yes'){
                        Ext.Ajax.request({
                            url: window.location.pathname +'update/membershipApproval',
                            method: 'POST',
                                params:{
                                userId: userId,
                                approvedType:requestedMembershipLevel,
                                isApproved:1

                                },

                        scope:this,
                        success: function(response){
                            var responseText = Ext.decode(response.responseText);

                        }

                    });

                }
            });} else {
               Ext.MessageBox.alert('Status','Please select a request to approve');
        }
    },

    onBtnRejectRequestClick: function() {
        var userRequestGrid = Ext.getCmp('membershipRequestGrid');
        var userGridStore = userRequestGrid.getStore();
        var selectedRows = userRequestGrid.getSelectionModel().getSelection()[0];
        var rowIndex = userGridStore.indexOf(selectedRows);
        if (rowIndex >-1 ){
            var userId = selectedRows.data.userId;
            var requestedMembershipLevel = selectedRows.data.requestedMembershipLevel;
            Ext.Msg.confirm('Approve Request', 'Do you want to Reject this request?',function(btn){
                if (btn==='yes'){
                      Ext.Ajax.request({
                            url: window.location.pathname +'update/membershipApproval',
                            method: 'POST',
                                params:{
                                userId: userId,
                                approvedType:requestedMembershipLevel,
                                isApproved:0

                                },

                        scope:this,
                        success: function(response){
                            var responseText = Ext.decode(response.responseText);

                        }

                    });
                    userGridStore.remove(selectedRows);
                }
            });} else {
               Ext.MessageBox.alert('Status','Please select a request ');
        }
    },

    onBtnLogoutClick: function() {
                var userStore  = Ext.getStore('userStore');
                userStore.removeAll();
                Ext.Msg.alert('Status', 'Signing out.');
                this.getAdminPageContainer().hide();
                this.getLoginContainer().show();
    },

    onBtnSaveUpdatesClick: function() {


        var orderRequestsGrid = Ext.getCmp('orderRequestsGrid');
        var orderRequestsStore = orderRequestsGrid.getStore();
        var selectedRows = orderRequestsGrid.getSelectionModel().getSelection()[0];
        var rowIndex = orderRequestsStore.indexOf(selectedRows);
        if (rowIndex >-1 ){
            var userId = selectedRows.data.orderId;
            var orderStatus = selectedRows.data.orderStatus;
            Ext.Msg.confirm('Approve Request', 'Do you want to Approve this request?',function(btn){
                if (btn==='yes'){
                        Ext.Ajax.request({
                            url: window.location.pathname +'update/updateOrderStatus',
                            method: 'POST',
                                params:{
                                    orderId: userId,
                                    status: orderStatus
                                },

                        scope:this,
                        success: function(response){
                            var responseText = Ext.decode(response.responseText);
                             Ext.MessageBox.alert('Status','Order Updated');

                        }

                    });

                }
            });} else {
               Ext.MessageBox.alert('Status','Please select a request to approve');
        }
    },

    init: function(application) {
        this.control({
            "#btnCustomerRequest": {
                click: this.onBtnCustomerRequestClick
            },
            "#confirmOrderBtn": {
                click: this.onConfirmOrderBtnClick
            },
            "#btnLogin": {
                click: this.onBtnLoginClick
            },
            "#viewAllOrderGrid": {
                itemdblclick: this.onViewAllOrderGridItemDblClick
            },
            "#viewAllOrderBtn": {
                click: this.onViewAllOrderBtnClick
            },
            "#btnApproveRequest": {
                click: this.onBtnApproveRequestClick
            },
            "#btnRejectRequest": {
                click: this.onBtnRejectRequestClick
            },
            "#btnLogout": {
                click: this.onBtnLogoutClick
            },
            "#btnSaveUpdates": {
                click: this.onBtnSaveUpdatesClick
            }
        });
    }

});
